
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000372  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000372  000003e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c1  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000626  00000000  00000000  00000c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000326  00000000  00000000  0000127f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000015a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021e  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001bae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 81 00 	call	0x102	; 0x102 <main>
  7a:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <RandomI>:
Clock Period = 1 / 32000 = 1 / 32 (ms)
Time Count = (6 / (1/32) ) – 1 = 191
*/

//Ham random [a,b)
int RandomI (int min, int max){
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	8c 01       	movw	r16, r24
  8c:	eb 01       	movw	r28, r22
	return min + rand() % (max - min);
  8e:	0e 94 44 01 	call	0x288	; 0x288 <rand>
  92:	be 01       	movw	r22, r28
  94:	60 1b       	sub	r22, r16
  96:	71 0b       	sbc	r23, r17
  98:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <__divmodhi4>
}
  9c:	80 0f       	add	r24, r16
  9e:	91 1f       	adc	r25, r17
  a0:	df 91       	pop	r29
  a2:	cf 91       	pop	r28
  a4:	1f 91       	pop	r17
  a6:	0f 91       	pop	r16
  a8:	08 95       	ret

000000aa <RandomII>:
//Ham random [a,b]
int RandomII (int min, int max){
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	8c 01       	movw	r16, r24
  b4:	eb 01       	movw	r28, r22
	return min + rand() % (max + 1 - min);
  b6:	0e 94 44 01 	call	0x288	; 0x288 <rand>
  ba:	be 01       	movw	r22, r28
  bc:	6f 5f       	subi	r22, 0xFF	; 255
  be:	7f 4f       	sbci	r23, 0xFF	; 255
  c0:	60 1b       	sub	r22, r16
  c2:	71 0b       	sbc	r23, r17
  c4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <__divmodhi4>
}
  c8:	80 0f       	add	r24, r16
  ca:	91 1f       	adc	r25, r17
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	1f 91       	pop	r17
  d2:	0f 91       	pop	r16
  d4:	08 95       	ret

000000d6 <assign>:
//Ham gan gia tri luong mua
int assign (){
	float a;
	a = RandomII(0, 40);
  d6:	68 e2       	ldi	r22, 0x28	; 40
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 55 00 	call	0xaa	; 0xaa <RandomII>
	PORTA = a;
  e2:	8b bb       	out	0x1b, r24	; 27
	return PORTA;
  e4:	8b b3       	in	r24, 0x1b	; 27
}
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	08 95       	ret

000000ea <T0delay>:
//Timer
void T0delay()
{
	TCNT0= 0xBF;
  ea:	8f eb       	ldi	r24, 0xBF	; 191
  ec:	82 bf       	out	0x32, r24	; 50
	TCCR0= 0b00000001; // no prescaler
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	83 bf       	out	0x33, r24	; 51
	while((TIFR&0x01)==0);
  f2:	08 b6       	in	r0, 0x38	; 56
  f4:	00 fe       	sbrs	r0, 0
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <T0delay+0x8>
	TCCR0= 0;
  f8:	13 be       	out	0x33, r1	; 51
	TIFR= 0x01; // Clear TOV0 to ‘1’ for the next round.
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	88 bf       	out	0x38, r24	; 56
	sei();
  fe:	78 94       	sei
 100:	08 95       	ret

00000102 <main>:
}

int main(void)
{		
	DDRA = 0xFF;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 106:	84 bb       	out	0x14, r24	; 20
	RandomI (0,40);
 108:	68 e2       	ldi	r22, 0x28	; 40
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 41 00 	call	0x82	; 0x82 <RandomI>
	RandomII(0,40);
 114:	68 e2       	ldi	r22, 0x28	; 40
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 55 00 	call	0xaa	; 0xaa <RandomII>
	assign();
 120:	0e 94 6b 00 	call	0xd6	; 0xd6 <assign>
			PORTC=0x00;
			T0delay();		
		}
	}*/
		// Task ii
		for (int i = 0; i <= 3; i++){
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	d0 e0       	ldi	r29, 0x00	; 0
 128:	37 c0       	rjmp	.+110    	; 0x198 <main+0x96>
			t = assign();
 12a:	0e 94 6b 00 	call	0xd6	; 0xd6 <assign>
			if (t >= 0 && t < 10 ){
 12e:	8a 30       	cpi	r24, 0x0A	; 10
 130:	91 05       	cpc	r25, r1
 132:	18 f4       	brcc	.+6      	; 0x13a <main+0x38>
				PORTC=0x01;				
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	85 bb       	out	0x15, r24	; 21
 138:	17 c0       	rjmp	.+46     	; 0x168 <main+0x66>
			}
			else if (t >= 10 && t < 20){
 13a:	9c 01       	movw	r18, r24
 13c:	2a 50       	subi	r18, 0x0A	; 10
 13e:	31 09       	sbc	r19, r1
 140:	2a 30       	cpi	r18, 0x0A	; 10
 142:	31 05       	cpc	r19, r1
 144:	18 f4       	brcc	.+6      	; 0x14c <main+0x4a>
				PORTC=0x02;
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	85 bb       	out	0x15, r24	; 21
 14a:	0e c0       	rjmp	.+28     	; 0x168 <main+0x66>
				
			}
			else if(t >= 20 && t < 30 ){
 14c:	9c 01       	movw	r18, r24
 14e:	24 51       	subi	r18, 0x14	; 20
 150:	31 09       	sbc	r19, r1
 152:	2a 30       	cpi	r18, 0x0A	; 10
 154:	31 05       	cpc	r19, r1
 156:	18 f4       	brcc	.+6      	; 0x15e <main+0x5c>
				PORTC=0x04;
 158:	84 e0       	ldi	r24, 0x04	; 4
 15a:	85 bb       	out	0x15, r24	; 21
 15c:	05 c0       	rjmp	.+10     	; 0x168 <main+0x66>
				
			}
			else if (t >=30 && t < 40 ){
 15e:	4e 97       	sbiw	r24, 0x1e	; 30
 160:	0a 97       	sbiw	r24, 0x0a	; 10
 162:	10 f4       	brcc	.+4      	; 0x168 <main+0x66>
				PORTC=0x08;								
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	85 bb       	out	0x15, r24	; 21
			}
			T0delay();
 168:	0e 94 75 00 	call	0xea	; 0xea <T0delay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	83 ed       	ldi	r24, 0xD3	; 211
 170:	90 e3       	ldi	r25, 0x30	; 48
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0x70>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x7a>
 17c:	00 00       	nop
			_delay_ms(1000);
			PORTC=0x00;
 17e:	15 ba       	out	0x15, r1	; 21
 180:	2f ef       	ldi	r18, 0xFF	; 255
 182:	83 ed       	ldi	r24, 0xD3	; 211
 184:	90 e3       	ldi	r25, 0x30	; 48
 186:	21 50       	subi	r18, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x84>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x8e>
 190:	00 00       	nop
			_delay_ms(1000);
			T0delay();	
 192:	0e 94 75 00 	call	0xea	; 0xea <T0delay>
			PORTC=0x00;
			T0delay();		
		}
	}*/
		// Task ii
		for (int i = 0; i <= 3; i++){
 196:	21 96       	adiw	r28, 0x01	; 1
 198:	c4 30       	cpi	r28, 0x04	; 4
 19a:	d1 05       	cpc	r29, r1
 19c:	34 f2       	brlt	.-116    	; 0x12a <main+0x28>
 19e:	c2 cf       	rjmp	.-124    	; 0x124 <main+0x22>

000001a0 <__divmodhi4>:
 1a0:	97 fb       	bst	r25, 7
 1a2:	07 2e       	mov	r0, r23
 1a4:	16 f4       	brtc	.+4      	; 0x1aa <__divmodhi4+0xa>
 1a6:	00 94       	com	r0
 1a8:	07 d0       	rcall	.+14     	; 0x1b8 <__divmodhi4_neg1>
 1aa:	77 fd       	sbrc	r23, 7
 1ac:	09 d0       	rcall	.+18     	; 0x1c0 <__divmodhi4_neg2>
 1ae:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <__udivmodhi4>
 1b2:	07 fc       	sbrc	r0, 7
 1b4:	05 d0       	rcall	.+10     	; 0x1c0 <__divmodhi4_neg2>
 1b6:	3e f4       	brtc	.+14     	; 0x1c6 <__divmodhi4_exit>

000001b8 <__divmodhi4_neg1>:
 1b8:	90 95       	com	r25
 1ba:	81 95       	neg	r24
 1bc:	9f 4f       	sbci	r25, 0xFF	; 255
 1be:	08 95       	ret

000001c0 <__divmodhi4_neg2>:
 1c0:	70 95       	com	r23
 1c2:	61 95       	neg	r22
 1c4:	7f 4f       	sbci	r23, 0xFF	; 255

000001c6 <__divmodhi4_exit>:
 1c6:	08 95       	ret

000001c8 <__udivmodhi4>:
 1c8:	aa 1b       	sub	r26, r26
 1ca:	bb 1b       	sub	r27, r27
 1cc:	51 e1       	ldi	r21, 0x11	; 17
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <__udivmodhi4_ep>

000001d0 <__udivmodhi4_loop>:
 1d0:	aa 1f       	adc	r26, r26
 1d2:	bb 1f       	adc	r27, r27
 1d4:	a6 17       	cp	r26, r22
 1d6:	b7 07       	cpc	r27, r23
 1d8:	10 f0       	brcs	.+4      	; 0x1de <__udivmodhi4_ep>
 1da:	a6 1b       	sub	r26, r22
 1dc:	b7 0b       	sbc	r27, r23

000001de <__udivmodhi4_ep>:
 1de:	88 1f       	adc	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	5a 95       	dec	r21
 1e4:	a9 f7       	brne	.-22     	; 0x1d0 <__udivmodhi4_loop>
 1e6:	80 95       	com	r24
 1e8:	90 95       	com	r25
 1ea:	bc 01       	movw	r22, r24
 1ec:	cd 01       	movw	r24, r26
 1ee:	08 95       	ret

000001f0 <do_rand>:
 1f0:	8f 92       	push	r8
 1f2:	9f 92       	push	r9
 1f4:	af 92       	push	r10
 1f6:	bf 92       	push	r11
 1f8:	cf 92       	push	r12
 1fa:	df 92       	push	r13
 1fc:	ef 92       	push	r14
 1fe:	ff 92       	push	r15
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	ec 01       	movw	r28, r24
 206:	68 81       	ld	r22, Y
 208:	79 81       	ldd	r23, Y+1	; 0x01
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	9b 81       	ldd	r25, Y+3	; 0x03
 20e:	61 15       	cp	r22, r1
 210:	71 05       	cpc	r23, r1
 212:	81 05       	cpc	r24, r1
 214:	91 05       	cpc	r25, r1
 216:	21 f4       	brne	.+8      	; 0x220 <do_rand+0x30>
 218:	64 e2       	ldi	r22, 0x24	; 36
 21a:	79 ed       	ldi	r23, 0xD9	; 217
 21c:	8b e5       	ldi	r24, 0x5B	; 91
 21e:	97 e0       	ldi	r25, 0x07	; 7
 220:	2d e1       	ldi	r18, 0x1D	; 29
 222:	33 ef       	ldi	r19, 0xF3	; 243
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__divmodsi4>
 22c:	49 01       	movw	r8, r18
 22e:	5a 01       	movw	r10, r20
 230:	9b 01       	movw	r18, r22
 232:	ac 01       	movw	r20, r24
 234:	a7 ea       	ldi	r26, 0xA7	; 167
 236:	b1 e4       	ldi	r27, 0x41	; 65
 238:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__muluhisi3>
 23c:	6b 01       	movw	r12, r22
 23e:	7c 01       	movw	r14, r24
 240:	ac ee       	ldi	r26, 0xEC	; 236
 242:	b4 ef       	ldi	r27, 0xF4	; 244
 244:	a5 01       	movw	r20, r10
 246:	94 01       	movw	r18, r8
 248:	0e 94 81 01 	call	0x302	; 0x302 <__mulohisi3>
 24c:	dc 01       	movw	r26, r24
 24e:	cb 01       	movw	r24, r22
 250:	8c 0d       	add	r24, r12
 252:	9d 1d       	adc	r25, r13
 254:	ae 1d       	adc	r26, r14
 256:	bf 1d       	adc	r27, r15
 258:	b7 ff       	sbrs	r27, 7
 25a:	03 c0       	rjmp	.+6      	; 0x262 <do_rand+0x72>
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	a1 09       	sbc	r26, r1
 260:	b0 48       	sbci	r27, 0x80	; 128
 262:	88 83       	st	Y, r24
 264:	99 83       	std	Y+1, r25	; 0x01
 266:	aa 83       	std	Y+2, r26	; 0x02
 268:	bb 83       	std	Y+3, r27	; 0x03
 26a:	9f 77       	andi	r25, 0x7F	; 127
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	df 90       	pop	r13
 276:	cf 90       	pop	r12
 278:	bf 90       	pop	r11
 27a:	af 90       	pop	r10
 27c:	9f 90       	pop	r9
 27e:	8f 90       	pop	r8
 280:	08 95       	ret

00000282 <rand_r>:
 282:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <do_rand>
 286:	08 95       	ret

00000288 <rand>:
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <do_rand>
 290:	08 95       	ret

00000292 <srand>:
 292:	a0 e0       	ldi	r26, 0x00	; 0
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 29a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 29e:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2a2:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2a6:	08 95       	ret

000002a8 <__divmodsi4>:
 2a8:	05 2e       	mov	r0, r21
 2aa:	97 fb       	bst	r25, 7
 2ac:	1e f4       	brtc	.+6      	; 0x2b4 <__divmodsi4+0xc>
 2ae:	00 94       	com	r0
 2b0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__negsi2>
 2b4:	57 fd       	sbrc	r21, 7
 2b6:	07 d0       	rcall	.+14     	; 0x2c6 <__divmodsi4_neg2>
 2b8:	0e 94 86 01 	call	0x30c	; 0x30c <__udivmodsi4>
 2bc:	07 fc       	sbrc	r0, 7
 2be:	03 d0       	rcall	.+6      	; 0x2c6 <__divmodsi4_neg2>
 2c0:	4e f4       	brtc	.+18     	; 0x2d4 <__divmodsi4_exit>
 2c2:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__negsi2>

000002c6 <__divmodsi4_neg2>:
 2c6:	50 95       	com	r21
 2c8:	40 95       	com	r20
 2ca:	30 95       	com	r19
 2cc:	21 95       	neg	r18
 2ce:	3f 4f       	sbci	r19, 0xFF	; 255
 2d0:	4f 4f       	sbci	r20, 0xFF	; 255
 2d2:	5f 4f       	sbci	r21, 0xFF	; 255

000002d4 <__divmodsi4_exit>:
 2d4:	08 95       	ret

000002d6 <__negsi2>:
 2d6:	90 95       	com	r25
 2d8:	80 95       	com	r24
 2da:	70 95       	com	r23
 2dc:	61 95       	neg	r22
 2de:	7f 4f       	sbci	r23, 0xFF	; 255
 2e0:	8f 4f       	sbci	r24, 0xFF	; 255
 2e2:	9f 4f       	sbci	r25, 0xFF	; 255
 2e4:	08 95       	ret

000002e6 <__muluhisi3>:
 2e6:	0e 94 a8 01 	call	0x350	; 0x350 <__umulhisi3>
 2ea:	a5 9f       	mul	r26, r21
 2ec:	90 0d       	add	r25, r0
 2ee:	b4 9f       	mul	r27, r20
 2f0:	90 0d       	add	r25, r0
 2f2:	a4 9f       	mul	r26, r20
 2f4:	80 0d       	add	r24, r0
 2f6:	91 1d       	adc	r25, r1
 2f8:	11 24       	eor	r1, r1
 2fa:	08 95       	ret

000002fc <__mulshisi3>:
 2fc:	b7 ff       	sbrs	r27, 7
 2fe:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__muluhisi3>

00000302 <__mulohisi3>:
 302:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__muluhisi3>
 306:	82 1b       	sub	r24, r18
 308:	93 0b       	sbc	r25, r19
 30a:	08 95       	ret

0000030c <__udivmodsi4>:
 30c:	a1 e2       	ldi	r26, 0x21	; 33
 30e:	1a 2e       	mov	r1, r26
 310:	aa 1b       	sub	r26, r26
 312:	bb 1b       	sub	r27, r27
 314:	fd 01       	movw	r30, r26
 316:	0d c0       	rjmp	.+26     	; 0x332 <__udivmodsi4_ep>

00000318 <__udivmodsi4_loop>:
 318:	aa 1f       	adc	r26, r26
 31a:	bb 1f       	adc	r27, r27
 31c:	ee 1f       	adc	r30, r30
 31e:	ff 1f       	adc	r31, r31
 320:	a2 17       	cp	r26, r18
 322:	b3 07       	cpc	r27, r19
 324:	e4 07       	cpc	r30, r20
 326:	f5 07       	cpc	r31, r21
 328:	20 f0       	brcs	.+8      	; 0x332 <__udivmodsi4_ep>
 32a:	a2 1b       	sub	r26, r18
 32c:	b3 0b       	sbc	r27, r19
 32e:	e4 0b       	sbc	r30, r20
 330:	f5 0b       	sbc	r31, r21

00000332 <__udivmodsi4_ep>:
 332:	66 1f       	adc	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	88 1f       	adc	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	1a 94       	dec	r1
 33c:	69 f7       	brne	.-38     	; 0x318 <__udivmodsi4_loop>
 33e:	60 95       	com	r22
 340:	70 95       	com	r23
 342:	80 95       	com	r24
 344:	90 95       	com	r25
 346:	9b 01       	movw	r18, r22
 348:	ac 01       	movw	r20, r24
 34a:	bd 01       	movw	r22, r26
 34c:	cf 01       	movw	r24, r30
 34e:	08 95       	ret

00000350 <__umulhisi3>:
 350:	a2 9f       	mul	r26, r18
 352:	b0 01       	movw	r22, r0
 354:	b3 9f       	mul	r27, r19
 356:	c0 01       	movw	r24, r0
 358:	a3 9f       	mul	r26, r19
 35a:	70 0d       	add	r23, r0
 35c:	81 1d       	adc	r24, r1
 35e:	11 24       	eor	r1, r1
 360:	91 1d       	adc	r25, r1
 362:	b2 9f       	mul	r27, r18
 364:	70 0d       	add	r23, r0
 366:	81 1d       	adc	r24, r1
 368:	11 24       	eor	r1, r1
 36a:	91 1d       	adc	r25, r1
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
